{
  "scripts": {
    "bootstrap": "pnpm install",

    "prestart": "pnpm --filter ./apps/web run build",
    "dev": "sh -c 'pnpm --filter ./apps/web run dev & PORT=4000 pnpm --filter ./apps/api run start:dev & wait'",
    "build": "pnpm --filter ./apps/web run build && pnpm --filter ./apps/api run build",
    "start": "sh -c 'pnpm --filter ./apps/web run start & PORT=4000 pnpm --filter ./apps/api run start & wait'",

    "dev:web": "pnpm --filter ./apps/web run dev",
    "dev:api": "pnpm --filter ./apps/api run start:dev",
    "start:web": "pnpm --filter ./apps/web run start",
    "start:api": "pnpm --filter ./apps/api run start",

    "lint": "pnpm -r run lint",
    "format": "prettier --write .",
    "test": "pnpm -r run test",
    "test:e2e": "pnpm -r run test:e2e",
    "typecheck": "pnpm -r run typecheck",
    "clean": "rimraf node_modules && pnpm -r exec rimraf node_modules dist",

    "// ---------- DB (docker compose: service=db) ----------": "—",
    "db:up": "docker compose up -d db",
    "db:down": "docker compose stop db",
    "db:destroy": "docker compose down -v",
    "db:ps": "docker compose ps",
    "db:logs": "docker compose logs -f db",
    "db:wait": "docker compose exec -T db sh -lc 'until pg_isready -U ${POSTGRES_USER:-qrapp} -d ${POSTGRES_DB:-qr}; do sleep 1; done'",
    "db:shell": "docker compose exec db sh -lc 'psql -U ${POSTGRES_USER:-qrapp} -d ${POSTGRES_DB:-qr}'",

    "// ---------- Prisma (run package scripts in @apps/api) ----------": "—",
    "prisma:generate": "pnpm --filter @apps/api run prisma:generate",
    "prisma:migrate": "pnpm --filter @apps/api run prisma:migrate",
    "prisma:studio": "pnpm --filter @apps/api run prisma:studio",
    "db:reset": "pnpm --filter @apps/api run db:reset",
    "prisma:migrate:deploy": "pnpm --filter @apps/api exec prisma migrate deploy"
  }
}