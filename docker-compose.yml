version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: cafe-qr-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-qr}
      POSTGRES_USER: ${DB_USER:-qrapp}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-qrpass}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30
    networks:
      - cafe-qr-net

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    image: cafe-qr-api:latest
    container_name: cafe-qr-api
    env_file:
      - apps/api/.env
    environment:
      # Значения по умолчанию, если .env нет
      PORT: ${PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: ${DATABASE_URL:-postgresql://qrapp:qrpass@db:5432/qr?schema=public}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http=require('http');const req=http.request({host:'127.0.0.1',port:process.env.PORT||3000,path:'/health'},res=>process.exit(res.statusCode===200?0:1));req.on('error',()=>process.exit(1));req.end();"
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - cafe-qr-net

networks:
  cafe-qr-net:
    name: cafe-qr-net

volumes:
  db-data: